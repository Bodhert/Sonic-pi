--- MINI notation week-1 part 2
--- @ means make the step x time as long, is to have more "flexible" tempos

tidal_version -- check the tidal version

-- euclidian notation

d1 $ sound "bd(3,4)"



hush



--- MINI notation week-1 part 2
d1 $ sound "hi lo [hi hi]"

hush

--- * x multiplies x times the step, meaning that it acelerates the speed
--- of that sound x times

--- this two things are equivalent

d1 $ sound "hi lo*3"

d1 $ sound "hi [lo lo lo]"

---

d1 $ sound "hi [hi lo]*1.5" -- this make and alternation between
                            -- hi lo hi and lo hi lo

d1 $ sound "hi*1.5"

--- ! bang operator is a repeater

d1 $ sound "hi lo lo lo"

d1 $ sound "hi lo!3"

d1 $ sound "hi lo*3!3"

hush


-- slow down with / it basically divides the time 

d1 $ sound "hi lo/2"

d1 $ sound "clap:4 [lo hi]/2"

d1 $ sound "clap:4 [lo hi bd sd]/2"

d1 $ fast 2 $ sound "clap:4 [lo hi bd sd]/4" 

--- dividing by weird numbers create weird pattern

d1 $ "clap:4 [lo hi bd sd]/3"




d1 $ fast 2 $ sound "clap:4 [lo hi bd sd]/4" 

hush  

-- pholyphony: various sound happening at the same time

d1 $ sound "bd sn"

d2 $ sound "arpy*3"

-- the previous is equivalent to

d1 $ sound "[bd sn, arpy*3]"

d1 $ sound "[bd sn, arpy*3, mt ht lt mt] [clap:6 snare]"

-- {} -> align the steps? what I understood is that every argument on the other side
-- of the comma align with the argument in the other side
-- {bd sd, arpy*3} -> bd arpy, sd arpy, bd arpy ...

d1 $ sound "{bd sd, arpy*4}"

hush

--- rythmic feet with .

d1 $ sound "[bd sd] [mt ht lt] [arpy arpy:4]"

-- is the same as

d1 $ sound "bd sd . mt ht lt . arpy arpy:4"

hush

-- <> notation means to pick one per cycle

d1 $ "clap:4 [lo hi bd]/3"

-- the same as:

d1 $ "clap:4 <lo hi bd>"

---
-- mini notation: it does rythm and sequences and is indicated by ",
-- is a language inside tidal
-- functions transform those sequnces 

d1 $sound "kick snare" 

-- the more things we add, the faster they go
-- it tries to fit everything in the same cycle
-- and all the other ones will try to match in
-- the same cycle

d1 $ sound "kick snare clap clap clap" 

d2 $ sound "clap"

hush

-- s and sound means the same thing, thats due live coding
-- interaction 

-- I can select the sample in the mini notatio

d1 $ s "kick:2" 

-- or with n pattern

d1 $ n "0 3 5" # "kick"

d1 $ s "kick:0 kick:3 kick:5" -- are the same

-- ~ "empty sound" 

d1 $ n "0 3 ~" # "kick"


-- subsequncing [  ]

d1 $ n "0 3 [5 5]" # "kick"

d1 $ n "[0 1 2] 3 [5 5]" # "kick"

d1 $ n "[0 1 2] 3 [5 [5 1 4 5] ]" # "kick"

d1 $ n "[0 1 2] 3 [5 [[5 3 4]  1 4 5] ]" # "kick"

hush

---------

-- you can download a samples pack and load it in supercollider wiht
-- the following

-- ~dirt.loadSoundFiles("<path-to-your-file")

d1 $ sound "cpu:0" 

-- sequencing:

d1 $ sound "cpu:3 cpu:5" 

-- using n pattern

d1 $ n "0 4 3 5" # sound "cpu" 

hush

-------------

d1 $ sound "bd sd"

d2 $ sound "arpy"
  # crush 3

d1 silence -- it stops the selected pattern

hush

-- not always the things starts 
-- commands positions does not matter

-------
d1 $ sound "db"

d2 $ sound "~ sn"

hush


-- tidal just creates patterns ans send signal to super colider
-- to supperdirt so superdirt is a synth



